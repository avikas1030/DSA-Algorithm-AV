/////////////////////////                  C++                         //////////////////////////

class Solution {
public:
    void DFS(vector<int>adj[], int u, vector<bool>& visited){
        visited[u] = true;
        for(auto &v : adj[u]){
            if(!visited[v]){
                DFS(adj, v, visited);
            }
        }
    }
    bool isConnected(int V, vector<int>adj[]){
        int zeroDegreeVertex = -1;
        for(int i=0; i<V; i++){
            if(adj[i].size() != 0){
                zeroDegreeVertex = i;
                break;
            }
        }
        vector<bool> visited(V, false);
        DFS(adj, zeroDegreeVertex, visited);
        
        for(int i=0; i<V; i++){
            if(visited[i] == false && adj[i].size() > 0){
                return false;
            }
        }
        return true;
    }
	int isEulerCircuit(int V, vector<int>adj[]){
	    if(isConnected(V, adj)==false){
	        return 0;
	    }
	    int oddDegreeCount = 0;
	    for(int i=0; i<V; i++){
	        if(adj[i].size()&1){
	            oddDegreeCount++;
	        }
	    }
	    
	    if(oddDegreeCount > 2){
	        return 0;
	    }
	    else if(oddDegreeCount == 2){
	        return 1;
	    }
	    return 2;
	}
};

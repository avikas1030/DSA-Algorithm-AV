# code -
#include <bits/stdc++.h>
using namespace std;
 
int n;
vector<vector<int>> adj;
vector<int> sz;
 
// Iterative DFS to compute subtree sizes
void compute_subtree_sizes(int root) {
    vector<int> parent(n, -1);
    stack<int> st;
    st.push(root);
 
    // Post-order traversal using stack
    vector<int> order;
    while (!st.empty()) {
        int u = st.top();
        st.pop();
        order.push_back(u);
        for (int v : adj[u]) {
            if (v != parent[u]) {
                parent[v] = u;
                st.push(v);
            }
        }
    }
 
    // Compute subtree sizes in reverse order
    sz.assign(n, 1);
    for (int i = n - 1; i >= 0; i--) {
        int u = order[i];
        if (parent[u] != -1) {
            sz[parent[u]] += sz[u];
        }
    }
}
 
int main() {
    cin >> n;
    adj.resize(n);
    sz.resize(n);
 
    for (int i = 0; i < n - 1; i++) {
        int u, v;
        cin >> u >> v;
        u--; v--;  // 0-indexed
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
 
    compute_subtree_sizes(0); // root = 0
    return sz;
}

// promlem link : https://leetcode.com/problems/is-graph-bipartite/
class Solution {
public:
    bool DFS(int u, vector<vector<int>>& adj, vector<int>& color, int currcolor){
        color[u]=currcolor;
        for(auto &v : adj[u]){
            if(color[v]==color[u])return false;
            if(color[v]==-1){
                int colorcurrent = 1-currcolor;
                if(!DFS(v,adj,color,colorcurrent)){
                    return false;
                }

            }
        }
        return true;
    }
    bool isBipartite(vector<vector<int>>& graph) {
        int n = graph.size();
        vector<int> color(n, -1);
        for(int i=0; i<n; i++){
            if(color[i]==-1){
                if(DFS(i,graph,color,1)==false){
                    return false;
                }
            }
        }
        return true;
    }
};

// JAVA CODE  - 
import java.util.*;

class Solution {

    public boolean dfs(int u, List<List<Integer>> adj, int[] color, int currColor) {
        color[u] = currColor;

        for (int neighbor : adj.get(u)) {
            if (color[neighbor] == color[u]) {
                return false;
            }
            if (color[neighbor] == -1) {
                if (!dfs(neighbor, adj, color, 1 - currColor)) {
                    return false;
                }
            }
        }

        return true;
    }

    public boolean isBipartite(int[][] graph) {
        int n = graph.length;
        int[] color = new int[n];
        Arrays.fill(color, -1);

        // Convert input array to adjacency list
        List<List<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            adj.add(new ArrayList<>());
            for (int j : graph[i]) {
                adj.get(i).add(j);
            }
        }

        for (int i = 0; i < n; i++) {
            if (color[i] == -1) {
                if (!dfs(i, adj, color, 1)) {
                    return false;
                }
            }
        }

        return true;
    }
}

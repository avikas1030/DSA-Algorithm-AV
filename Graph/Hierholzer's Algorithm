# problem link - https://leetcode.com/problems/valid-arrangement-of-pairs/description/

# iterative dfs method -
class Solution {
public:
    vector<vector<int>> validArrangement(vector<vector<int>>& pairs) {
        unordered_map<int, vector<int>> adj;
        unordered_map<int, int> indegree, outdegree;
        for(auto &edge : pairs){
            int u = edge[0];
            int v = edge[1];
            adj[u].push_back(v);
            indegree[v]++;
            outdegree[u]++;
        }

        int startNode = pairs[0][0];
        for(auto &it : adj){
            int node = it.first;

            if(outdegree[node] - indegree[node] == 1){
                startNode = node;
                break;
            }
        }

        vector<int> path;
        stack<int> st;
        st.push(startNode);
        while(!st.empty()){
            int curr = st.top();
            if(!adj[curr].empty()){
                int n = adj[curr].back();
                adj[curr].pop_back();
                st.push(n);
            }
            else{
                path.push_back(curr);
                st.pop();
            }
        }
        vector<vector<int>> ans;
        for(int i=path.size()-1; i >= 1; i--){
            ans.push_back({path[i], path[i-1]});
        }
        return ans;
    }
};
# recursive dfs method - 
class Solution {
public:
    unordered_map<int, vector<int>> adj;
    vector<int> path;

    void dfs(int node) {
        while (!adj[node].empty()) {
            int v = adj[node].back();
            adj[node].pop_back();
            dfs(v);
        }
        path.push_back(node);
    }

    vector<vector<int>> validArrangement(vector<vector<int>>& pairs) {
        unordered_map<int, int> indegree, outdegree;
        
        // Build graph
        for (auto &edge : pairs) {
            int u = edge[0];
            int v = edge[1];
            adj[u].push_back(v);
            indegree[v]++;
            outdegree[u]++;
        }

        // Find start node
        int startNode = pairs[0][0];
        for (auto &it : adj) {
            int node = it.first;
            if (outdegree[node] - indegree[node] == 1) {
                startNode = node;
                break;
            }
        }

        // Run DFS
        dfs(startNode);

        // Build answer
        vector<vector<int>> ans;
        for (int i = path.size() - 1; i >= 1; i--) {
            ans.push_back({path[i], path[i - 1]});
        }
        return ans;
    }
};

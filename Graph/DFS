# Code - 
#include <bits/stdc++.h>
using namespace std;

int main() {
    int n, m;
    cout << "Enter number of nodes and edges: ";
    cin >> n >> m;

    vector<vector<int>> adj(n);
    cout << "Enter edges (u v):\n";
    for (int i = 0; i < m; i++) {
        int u, v;
        cin >> u >> v;
        adj[u].push_back(v);
        adj[v].push_back(u); // remove if graph is directed
    }

    int s, t;
    cout << "Enter source and destination: ";
    cin >> s >> t;

    vector<bool> used(n, false);
    vector<int> d(n, -1), p(n, -1);

    queue<int> q;
    q.push(s);
    used[s] = true;
    d[s] = 0;

    while (!q.empty()) {
        int u = q.front();
        q.pop();
        for (int v : adj[u]) {
            if (!used[v]) {
                used[v] = true;
                q.push(v);
                d[v] = d[u] + 1;
                p[v] = u;
            }
        }
    }

    if (!used[t]) {
        cout << "No path!" << endl;
    } else {
        vector<int> path;
        for (int v = t; v != -1; v = p[v])
            path.push_back(v);
        reverse(path.begin(), path.end());

        cout << "Shortest path length: " << d[t] << endl;
        cout << "Path: ";
        for (int v : path)
            cout << v << " ";
        cout << endl;
    }

    return 0;
}

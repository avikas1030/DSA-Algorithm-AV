

/* The functions which 
builds the segment tree */
void buildSegmentTree(int i, int l, int r, int segmentTree[], int arr[]){
    if(l == r){
        segmentTree[i] = arr[l];
        return;
    }
    int mid = l + (r - l)/2;
    
    buildSegmentTree(2*i+1, l, mid, segmentTree, arr);
    buildSegmentTree(2*i+2, mid+1, r, segmentTree, arr);
    
    segmentTree[i] = min(segmentTree[2*i+1], segmentTree[2*i+2]);
}
int *constructST(int arr[],int n)
{
  int *segmentTree = new int[4*n];
  buildSegmentTree(0, 0, n-1, segmentTree, arr);
  return segmentTree;
}


/* The functions returns the
 min element in the range
 from a and b */
int Query(int s, int e, int i, int l, int r, int segmentTree[]){
    if(r < s || l > e){
        return INT_MAX;
    }
    if(l >= s && r <= e){
        return segmentTree[i];
    }
    int mid = l + (r - l)/2;
    return min(Query(s, e, 2*i+1, l, mid, segmentTree), Query(s, e, 2*i+2, mid+1, r, segmentTree));
}
int RMQ(int st[] , int n, int a, int b)
{
    return Query(a, b,0, 0, n-1,st);
}

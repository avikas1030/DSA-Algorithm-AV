// problem 1 Link : https://leetcode.com/problems/find-the-index-of-the-first-occurrence-in-a-string/

code : 

class Solution {
public:
    void findlps(vector<int>& lps, string needle){
        int pre = 0;
        int suff = 1;
        while(suff < needle.size()){
            if(needle[pre]==needle[suff]){
                lps[suff] = pre+1;
                pre++;
                suff++;
            }
            else{
                if(pre==0){
                    lps[suff]=0;
                    suff++;
                }
                else{
                    pre = lps[pre-1];
                }
            }
        }
    }
    int solve(string haystack, string needle, vector<int> lps){
        int first = 0;
        int second = 0;
        while(first < haystack.size() && second < needle.size()){
            if(haystack[first]==needle[second]){
                first++;
                second++;
            }
            else{
                if(second==0){
                    first++;
                }
                else{
                    second = lps[second-1];
                }
            }
        }
        if(second==needle.size()){
            return first-second;
        }
        return -1;
    }
    int strStr(string haystack, string needle) {
        vector<int> lps(needle.size(), 0);
        findlps(lps, needle);
        return solve(haystack, needle, lps);
    }
};

problem 2 Link : https://www.geeksforgeeks.org/problems/search-pattern0205/1

code : 
class Solution
{
    public:
        void findlps(vector<int>& lps, const string& needle) {
        int pre = 0;
        int suff = 1;
        while (suff < needle.size()) {
            if (needle[pre] == needle[suff]) {
                lps[suff] = pre + 1;
                pre++;
                suff++;
            } else {
                if (pre == 0) {
                    lps[suff] = 0;
                    suff++;
                } else {
                    pre = lps[pre - 1];
                }
            }
        }
    }
     void solve(const string& haystack, const string& needle, const vector<int>& lps, vector<int>& ans) {
        int first = 0;  // pointer for haystack
        int second = 0; // pointer for needle
        while (first < haystack.size()) {
            if (haystack[first] == needle[second]) {
                first++;
                second++;
                if (second == needle.size()) {
                    ans.push_back(first - second + 1); // Push the starting index of the match
                    second = lps[second - 1];
                }
            } else {
                if (second == 0) {
                    first++;
                } else {
                    second = lps[second - 1];
                }
            }
        }
    }
        vector <int> search(string pat, string txt)
        {
            vector<int> lps(pat.size(), 0);
        vector<int> ans;
        findlps(lps, pat); // Create the LPS array for the pattern (needle)
        solve(txt, pat, lps, ans); // Search the pattern in the text
        return ans;
        }
     
};

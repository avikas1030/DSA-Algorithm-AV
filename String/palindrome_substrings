# probelm link - https://leetcode.com/problems/palindromic-substrings/
# code -  T.C - O(n^2), S.C - O(n^2)
class Solution {
public:
    int countSubstrings(string s) {
        int n = s.size();
        int count = 0;
        vector<vector<bool>> dp(n, vector<bool>(n, false));

        for(int l = 1; l <= n; l++){
            for(int i = 0; i+l <= n; i++){
                int j = i + l -1;
                if(i == j){
                    dp[i][i] = true;
                }
                else if(i+1 == j){
                    dp[i][j] = (s[i] == s[j]);
                }
                else{
                    dp[i][j] = ((s[i] == s[j]) && (dp[i+1][j-1] == true));
                }
                count += dp[i][j];
            }
        }
        return count;
        
    }
};

# code - T.C - O(n^2), S.C - O(1)
class Solution {
public:
    int count = 0;
    void check(string& s, int i, int j, int n) {
        
        while(i >= 0 && j < n && s[i] == s[j]) {
            count++;
            i--; //expanding from center
            j++; //expanding from center
        }
    }
    int countSubstrings(string s) {
        int n = s.length();
        count = 0;
        
        /*
            
    Every single character in the string is a center for possible odd-length palindromes: check(s, i, i);
    Every pair of consecutive characters in the string is a center for possible even-length palindromes: check(s, i, i+1);.

        */
        for(int i = 0; i<n; i++) {
            check(s, i, i, n);
            check(s, i, i+1, n);
        }
        return count;
    }
};
